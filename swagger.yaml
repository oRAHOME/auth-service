openapi: 3.0.0
info:
  title: Auth Service API
  description: API for user authentication and OAuth login
  version: 1.0.0
servers:
  - url: http://localhost:8000
    description: Local development server
paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: john_doe
                password:
                  type: string
                  example: Password123
                devices:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        example: switch
                      type:
                        type: string
                        example: light
                      state:
                        type: string
                        example: off
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User created
        '400':
          description: User already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User already exists
        '500':
          description: Internal server error
  /auth/login:
    post:
      summary: Log in a user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: john_doe
                password:
                  type: string
                  example: Password123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  refreshToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '400':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
        '401':
          description: Incorrect credentials
        '500':
          description: Internal server error
  /auth/token:
    post:
      summary: Refresh access token
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '401':
          description: Token is missing
        '403':
          description: Token is invalid
  /auth/logout:
    delete:
      summary: Log out a user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '204':
          description: User logged out successfully
  /auth/google:
    get:
      summary: Redirect to Google OAuth
      tags:
        - OAuth
      responses:
        '302':
          description: Redirect to Google login
  /auth/google/callback:
    get:
      summary: Google OAuth2 callback
      description: Handles the callback from Google after the user has authenticated. Returns an access token and refresh token.
      tags:
        - Authentication
      parameters:
        - name: state
          in: query
          required: false
          description: A state parameter optionally provided by the OAuth2 client.
          schema:
            type: string
      responses:
        200:
          description: Successful authentication with Google.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login successful"
                  accessToken:
                    type: string
                    description: JWT access token
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  refreshToken:
                    type: string
                    description: JWT refresh token
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  user:
                    type: object
                    description: The authenticated user's information
                    properties:
                      id:
                        type: string
                        description: User ID
                        example: "123456789"
                      name:
                        type: string
                        description: User's display name
                        example: "John Doe"
                      email:
                        type: string
                        description: User's email address
                        example: "johndoe@gmail.com"
        401:
          description: Authentication failed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "OAuth login failed"
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An error occurred during authentication."